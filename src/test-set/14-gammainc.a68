COMMENT

This program is part of the Algol 68 Genie test set.

A small selection of the Algol 68 Genie regression test set is distributed 
with Algol 68 Genie. The purpose of those programs is to perform some checks 
to judge whether A68G behaves as expected.
None of these programs should end ungraciously with for instance an 
addressing fault.

COMMENT

PR quiet regression PR

PR quiet regression PR

PR need mpfr PR

INT n = 1000;

(
  MODE NUM = REAL;
  
  REAL f, g, max dev := 0;
  
  (f := 1e-1, g := 1e-1);
  FOR k TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = gammainc(s, x), mpfr = SHORTEN SHORTEN mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, newline)); #
     IF REAL dev = SHORTEN SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  (f := 1e-1, g := 1e2);
  TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = gammainc(s, x), mpfr = SHORTEN SHORTEN mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, a68g - mpfr, newline)); #
     IF REAL dev = SHORTEN SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  print (("REAL max dev = ", max dev, new line));
);
  
(
  MODE NUM = LONG REAL;
  
  REAL f, g, max dev := 0;
  
  (f := 1e-1, g := 1e-1);
  FOR k TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = dgammainc(s, x), mpfr = SHORTEN mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, newline)); #
     IF REAL dev = SHORTEN SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  (f := 1e-1, g := 1e3);
  TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = dgammainc(s, x), mpfr = SHORTEN mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, newline)); #
     IF REAL dev = SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  print (("LONG REAL max dev = ", max dev, new line));
);
  
(
  MODE NUM = LONG LONG REAL;
  
  REAL f, g, max dev := 0;
  
  (f := 1e-1, g := 1e-1);
  FOR k TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = qgammainc(s, x), mpfr = mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, newline)); #
     IF REAL dev = SHORTEN SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  (f := 1e-1, g := 1e3);
  TO n
  DO NUM s = f + next random * g, x = f + next random * g;
     NUM a68g = qgammainc(s, x), mpfr = mpfr qgammainc(s, x);
     # print ((a68g, blank, mpfr, newline)); #
     IF REAL dev = SHORTEN SHORTEN ((a68g - mpfr) / mpfr);
        dev > max dev
     THEN max dev := dev
     FI
  OD;
  
  print (("LONG LONG REAL max dev = ", max dev, new line))
)
