COMMENT

This program is part of the Algol 68 Genie test set.

A small selection of the Algol 68 Genie regression test set is distributed 
with Algol 68 Genie. The purpose of those programs is to perform some checks 
to judge whether A68G behaves as expected.
None of these programs should end ungraciously with for instance an 
addressing fault.

COMMENT

PR quiet regression PR

COMMENT

@section Synopsis

Compute the determinant of a Hilbert matrix using fractions.

A comprehensive implementation of fractions is in the MC Algol 68 test set (appl08).

Order   Result
 1      1 / 1
 2      1 / 12
 3      1 / 2,160
 4      1 / 6,048,000
 5      1 / 266,716,800,000
 6      1 / 186,313,420,339,200,000
 7      1 / 2,067,909,047,925,770,649,600,000
 8      1 / 365,356,847,125,734,485,878,112,256,000,000
 9      1 / 1,028,781,784,378,569,697,887,052,962,909,388,800,000,000
10      1 / 46,206,893,947,914,691,316,295,628,839,036,278,726,983,680,000,000,000

COMMENT

BEGIN

# Data structure. #

      MODE FRAC = STRUCT (LINT n, d), LINT = INT;

      OP NOM = (FRAC u) LINT: n OF u,
         DEN = (FRAC u) LINT: d OF u;

      PR precision 101 PR # Now LINT holds a googol. #
 
# Basic operations. #
 
      OP RECIPROCAL = (LINT i) FRAC: IF i >= 0 THEN (1, i) ELSE (-1, -i) FI;
  
      OP - = (FRAC u) FRAC: (-NOM u, DEN u);
  
      OP + = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv + NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP +:= = (REF FRAC u, FRAC v) REF FRAC: u := u + v;
  
      OP - = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv - NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP -:= = (REF FRAC u, FRAC v) REF FRAC: u := u - v;
  
      OP * = (FRAC u, v) FRAC:
         BEGIN LINT i = NOM u GCD DEN v, j = NOM v GCD DEN u;
               ((NOM u OVER i) * (NOM v OVER j), (DEN u OVER j) * (DEN v OVER i))
         END;

      OP *:= = (REF FRAC u, FRAC v) REF FRAC: u := u * v;
  
      OP / = (FRAC u, FRAC v) FRAC:
         IF LINT i = NOM u GCD NOM v, j = DEN v GCD DEN u;
            NOM v >= 0
         THEN ((NOM u OVER i) * (DEN v OVER j), (DEN u OVER j) * (NOM v OVER i))
         ELSE (- (NOM u OVER i) * (DEN v OVER j), - (DEN u OVER j) * (NOM v OVER i))
         FI;

      OP /:= = (REF FRAC u, FRAC v) REF FRAC: u := u / v;
  
# Comparing rationals with integrals. #
  
      OP = = (FRAC u, LINT i) BOOL: NOM u = i ANDF DEN u = 1;
  
      OP /= = (FRAC u, LINT i) BOOL: NOT (u = i);
  
# Matrix algebra. #

      OP INNER = ([] FRAC u, v) FRAC:
         # Innerproduct of two arrays of rationals #
         BEGIN FRAC s := (0, 1);
               FOR i TO UPB u
               DO s +:= u[i] * v[i]
               OD;
               s
         END;

      PRIO INNER = 8;
  
      PROC lu decomposition = (REF [, ] FRAC a, REF [] INT p) VOID:
           # LU decomposition by Crout's method, of a matrix of rationals. #
           BEGIN INT n = 1 UPB a;
                 FOR k TO n
                 DO FRAC piv := (0, 1), INT k1 := k - 1;
                    REF INT pk = p[k];
                    REF [] FRAC aik = a[, k], aki = a[k,];
                    FOR i FROM k TO n
                    DO aik[i] -:= a[i, 1 : k1] INNER aik[1 : k1];
                       IF piv = LINT (0) AND aik[i] /= LINT (0)
                       THEN piv := aik[i]; 
                            pk := i
                       FI
                    OD;
                    IF piv = LINT (0)
                    THEN print((newline, newline, "Singular matrix"));
                         stop
                    FI;
                    IF pk /= k
                    THEN FOR i TO n
                         DO FRAC r = aki[i];
                            aki[i] := a[pk, i]; 
                            a[pk, i] := -r
                         OD
                    FI;
                    FOR i FROM k + 1 TO n
                    DO aki[i] -:= aki[1 : k1] INNER a[1 : k1, i] /:= piv
                    OD 
                 OD
           END;
  
      PROC determinant = ([,] FRAC a) FRAC:
           # Determinant of a decomposed matrix is its trace. #
           BEGIN FRAC d := (1, 1);
                 FOR i TO 1 UPB a
                 DO d *:= a[i, i]
                 OD;
                 d
           END;

# Recursive definition of greatest common divisor. #

      OP GCD = (LINT a, b) LINT:
         IF b = 0 
         THEN ABS a
         ELSE b GCD (a MOD b)
         FI;
  
      PRIO GCD = 8;

# Table of required results. #  
  
      [] LINT table = BEGIN
         1,
         12,
         2160,
         6048000
      END;

# Compute determinant of Hilbert matrix of increasing rank. #
   
      printf(($"Determinant of the Hilbert matrix - INT"$));
      FOR n TO UPB table
      DO [1 : n, 1 : n] FRAC a;
         FOR i TO n
         DO a[i,i] := RECIPROCAL LINT (i * 2 - 1);
            FOR j FROM i + 1 TO n
            DO a[i, j] := a[j, i] := RECIPROCAL LINT (i + j - 1)
            OD
         OD;
         lu decomposition(a, LOC [1 : n] INT);

         OP PRETTY = (LINT n) VOID:
            IF n < 0
            THEN print ("-");
                 PRETTY -n
            ELIF n < 1000
            THEN print (whole (n, 0))
            ELSE PRETTY (n % 1000);
                 printf (($","3d$, n %* 1000))
            FI;

         FRAC det = determinant (a);
         newline (standout);
         PRETTY NOM det;
         print (" / ");
         PRETTY DEN det;
         newline (standout);
         PRETTY 1;
         print (" / ");
         PRETTY table[n];
         newline (standout)
     OD;
     new line (standout)
END;

BEGIN

# Data structure. #

      MODE FRAC = STRUCT (LINT n, d), LINT = LONG INT;

      OP NOM = (FRAC u) LINT: n OF u,
         DEN = (FRAC u) LINT: d OF u;

      PR precision 101 PR # Now LINT holds a googol. #
 
# Basic operations. #
 
      OP RECIPROCAL = (LINT i) FRAC: IF i >= 0 THEN (1, i) ELSE (-1, -i) FI;
  
      OP - = (FRAC u) FRAC: (-NOM u, DEN u);
  
      OP + = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv + NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP +:= = (REF FRAC u, FRAC v) REF FRAC: u := u + v;
  
      OP - = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv - NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP -:= = (REF FRAC u, FRAC v) REF FRAC: u := u - v;
  
      OP * = (FRAC u, v) FRAC:
         BEGIN LINT i = NOM u GCD DEN v, j = NOM v GCD DEN u;
               ((NOM u OVER i) * (NOM v OVER j), (DEN u OVER j) * (DEN v OVER i))
         END;

      OP *:= = (REF FRAC u, FRAC v) REF FRAC: u := u * v;
  
      OP / = (FRAC u, FRAC v) FRAC:
         IF LINT i = NOM u GCD NOM v, j = DEN v GCD DEN u;
            NOM v >= 0
         THEN ((NOM u OVER i) * (DEN v OVER j), (DEN u OVER j) * (NOM v OVER i))
         ELSE (- (NOM u OVER i) * (DEN v OVER j), - (DEN u OVER j) * (NOM v OVER i))
         FI;

      OP /:= = (REF FRAC u, FRAC v) REF FRAC: u := u / v;
  
# Comparing rationals with integrals. #
  
      OP = = (FRAC u, LINT i) BOOL: NOM u = i ANDF DEN u = 1;
  
      OP /= = (FRAC u, LINT i) BOOL: NOT (u = i);
  
# Matrix algebra. #

      OP INNER = ([] FRAC u, v) FRAC:
         # Innerproduct of two arrays of rationals #
         BEGIN FRAC s := (0, 1);
               FOR i TO UPB u
               DO s +:= u[i] * v[i]
               OD;
               s
         END;

      PRIO INNER = 8;
  
      PROC lu decomposition = (REF [, ] FRAC a, REF [] INT p) VOID:
           # LU decomposition by Crout's method, of a matrix of rationals. #
           BEGIN INT n = 1 UPB a;
                 FOR k TO n
                 DO FRAC piv := (0, 1), INT k1 := k - 1;
                    REF INT pk = p[k];
                    REF [] FRAC aik = a[, k], aki = a[k,];
                    FOR i FROM k TO n
                    DO aik[i] -:= a[i, 1 : k1] INNER aik[1 : k1];
                       IF piv = LINT (0) AND aik[i] /= LINT (0)
                       THEN piv := aik[i]; 
                            pk := i
                       FI
                    OD;
                    IF piv = LINT (0)
                    THEN print((newline, newline, "Singular matrix"));
                         stop
                    FI;
                    IF pk /= k
                    THEN FOR i TO n
                         DO FRAC r = aki[i];
                            aki[i] := a[pk, i]; 
                            a[pk, i] := -r
                         OD
                    FI;
                    FOR i FROM k + 1 TO n
                    DO aki[i] -:= aki[1 : k1] INNER a[1 : k1, i] /:= piv
                    OD 
                 OD
           END;
  
      PROC determinant = ([,] FRAC a) FRAC:
           # Determinant of a decomposed matrix is its trace. #
           BEGIN FRAC d := (1, 1);
                 FOR i TO 1 UPB a
                 DO d *:= a[i, i]
                 OD;
                 d
           END;

# Recursive definition of greatest common divisor. #

      OP GCD = (LINT a, b) LINT:
         IF b = 0 
         THEN ABS a
         ELSE b GCD (a MOD b)
         FI;
  
      PRIO GCD = 8;

# Table of required results. #  
  
      [] LINT table = BEGIN
         LONG 1,
         LONG 12,
         LONG 2160,
         LONG 6048000,
         LONG 266716800000,
         LONG 186313420339200000, 
         LONG 2067909047925770649600000,
         LONG 365356847125734485878112256000000 
      END;

# Compute determinant of Hilbert matrix of increasing rank. #
   
      printf(($"Determinant of the Hilbert matrix - LONG INT"$));
      FOR n TO UPB table
      DO [1 : n, 1 : n] FRAC a;
         FOR i TO n
         DO a[i,i] := RECIPROCAL LINT (i * 2 - 1);
            FOR j FROM i + 1 TO n
            DO a[i, j] := a[j, i] := RECIPROCAL LINT (i + j - 1)
            OD
         OD;
         lu decomposition(a, LOC [1 : n] INT);

         OP PRETTY = (LINT n) VOID:
            IF n < 0
            THEN print ("-");
                 PRETTY -n
            ELIF n < 1000
            THEN print (whole (n, 0))
            ELSE PRETTY (n % 1000);
                 printf (($","3d$, n %* 1000))
            FI;

         FRAC det = determinant (a);
         newline (standout);
         PRETTY NOM det;
         print (" / ");
         PRETTY DEN det;
         newline (standout);
         PRETTY LONG 1;
         print (" / ");
         PRETTY table[n];
         newline (standout)
     OD;
     new line (standout)
END;

BEGIN

# Data structure. #

      MODE FRAC = STRUCT (LINT n, d), LINT = LONG LONG INT;

      OP NOM = (FRAC u) LINT: n OF u,
         DEN = (FRAC u) LINT: d OF u;

      PR precision 101 PR # Now LINT holds a googol. #
 
# Basic operations. #
 
      OP RECIPROCAL = (LINT i) FRAC: IF i >= 0 THEN (1, i) ELSE (-1, -i) FI;
  
      OP - = (FRAC u) FRAC: (-NOM u, DEN u);
  
      OP + = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv + NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP +:= = (REF FRAC u, FRAC v) REF FRAC: u := u + v;
  
      OP - = (FRAC u, FRAC v) FRAC:
         BEGIN LINT k = DEN u GCD DEN v;
               LINT du = DEN u OVER k, dv = DEN v OVER k;
               LINT n = NOM u * dv - NOM v * du;
               LINT l = n GCD k, d = dv * du;
               (n OVER l, k OVER l * d)
         END;

      OP -:= = (REF FRAC u, FRAC v) REF FRAC: u := u - v;
  
      OP * = (FRAC u, v) FRAC:
         BEGIN LINT i = NOM u GCD DEN v, j = NOM v GCD DEN u;
               ((NOM u OVER i) * (NOM v OVER j), (DEN u OVER j) * (DEN v OVER i))
         END;

      OP *:= = (REF FRAC u, FRAC v) REF FRAC: u := u * v;
  
      OP / = (FRAC u, FRAC v) FRAC:
         IF LINT i = NOM u GCD NOM v, j = DEN v GCD DEN u;
            NOM v >= 0
         THEN ((NOM u OVER i) * (DEN v OVER j), (DEN u OVER j) * (NOM v OVER i))
         ELSE (- (NOM u OVER i) * (DEN v OVER j), - (DEN u OVER j) * (NOM v OVER i))
         FI;

      OP /:= = (REF FRAC u, FRAC v) REF FRAC: u := u / v;
  
# Comparing rationals with integrals. #
  
      OP = = (FRAC u, LINT i) BOOL: NOM u = i ANDF DEN u = 1;
  
      OP /= = (FRAC u, LINT i) BOOL: NOT (u = i);
  
# Matrix algebra. #

      OP INNER = ([] FRAC u, v) FRAC:
         # Innerproduct of two arrays of rationals #
         BEGIN FRAC s := (0, 1);
               FOR i TO UPB u
               DO s +:= u[i] * v[i]
               OD;
               s
         END;

      PRIO INNER = 8;
  
      PROC lu decomposition = (REF [, ] FRAC a, REF [] INT p) VOID:
           # LU decomposition by Crout's method, of a matrix of rationals. #
           BEGIN INT n = 1 UPB a;
                 FOR k TO n
                 DO FRAC piv := (0, 1), INT k1 := k - 1;
                    REF INT pk = p[k];
                    REF [] FRAC aik = a[, k], aki = a[k,];
                    FOR i FROM k TO n
                    DO aik[i] -:= a[i, 1 : k1] INNER aik[1 : k1];
                       IF piv = LINT (0) AND aik[i] /= LINT (0)
                       THEN piv := aik[i]; 
                            pk := i
                       FI
                    OD;
                    IF piv = LINT (0)
                    THEN print((newline, newline, "Singular matrix"));
                         stop
                    FI;
                    IF pk /= k
                    THEN FOR i TO n
                         DO FRAC r = aki[i];
                            aki[i] := a[pk, i]; 
                            a[pk, i] := -r
                         OD
                    FI;
                    FOR i FROM k + 1 TO n
                    DO aki[i] -:= aki[1 : k1] INNER a[1 : k1, i] /:= piv
                    OD 
                 OD
           END;
  
      PROC determinant = ([,] FRAC a) FRAC:
           # Determinant of a decomposed matrix is its trace. #
           BEGIN FRAC d := (1, 1);
                 FOR i TO 1 UPB a
                 DO d *:= a[i, i]
                 OD;
                 d
           END;

# Recursive definition of greatest common divisor. #

      OP GCD = (LINT a, b) LINT:
         IF b = 0 
         THEN ABS a
         ELSE b GCD (a MOD b)
         FI;
  
      PRIO GCD = 8;

# Table of required results. #  
  
      [] LINT table = BEGIN
         LONG LONG 1,
         LONG LONG 12,
         LONG LONG 2160,
         LONG LONG 6048000,
         LONG LONG 266716800000,
         LONG LONG 186313420339200000, 
         LONG LONG 2067909047925770649600000,
         LONG LONG 365356847125734485878112256000000, 
         LONG LONG 1028781784378569697887052962909388800000000, 
         LONG LONG 46206893947914691316295628839036278726983680000000000
      END;

# Compute determinant of Hilbert matrix of increasing rank. #
   
      printf(($"Determinant of the Hilbert matrix - LONG LONG INT"$));
      FOR n TO UPB table
      DO [1 : n, 1 : n] FRAC a;
         FOR i TO n
         DO a[i,i] := RECIPROCAL LINT (i * 2 - 1);
            FOR j FROM i + 1 TO n
            DO a[i, j] := a[j, i] := RECIPROCAL LINT (i + j - 1)
            OD
         OD;
         lu decomposition(a, LOC [1 : n] INT);

         OP PRETTY = (LINT n) VOID:
            IF n < 0
            THEN print ("-");
                 PRETTY -n
            ELIF n < 1000
            THEN print (whole (n, 0))
            ELSE PRETTY (n % 1000);
                 printf (($","3d$, n %* 1000))
            FI;

         FRAC det = determinant (a);
         newline (standout);
         PRETTY NOM det;
         print (" / ");
         PRETTY DEN det;
         newline (standout);
         PRETTY LONG LONG 1;
         print (" / ");
         PRETTY table[n];
         newline (standout)
     OD;
     new line (standout)
END
