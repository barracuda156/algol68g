COMMENT

This program is part of the Algol 68 Genie test set.

A small selection of the Algol 68 Genie regression test set is distributed 
with Algol 68 Genie. The purpose of those programs is to perform some checks 
to judge whether A68G behaves as expected.
None of these programs should end ungraciously with for instance an 
addressing fault.

COMMENT

PR quiet regression PR

COMMENT

This program is part of the Algol 68 Genie test set.

A small selection of the Algol 68 Genie regression test set is distributed 
with Algol 68 Genie. The purpose of those programs is to perform some checks 
to judge whether A68G behaves as expected.
None of these programs should end ungraciously with for instance an 
addressing fault.

COMMENT

PR quiet regression PR

COMMENT

@section Synopsis

Zeroin is a classic root-finding algorithm.

After MCA 2310 in 'ALGOL 60 Procedures in Numerical Algebra' by Th. J. Dekker.

This Algol 68 version originates from the legacy "REVISED MC ALGOL 68 TEST SET":

    Dick Grune, The Revised MC ALGOL 68 Test Set, IW XX/79,
    Mathematical Centre, Amsterdam.

The Mathematical Centre ("Stichting Mathematisch Centrum" or SMC) was a Dutch 
non-profit institution aiming at the promotion of pure mathematics and its 
applications. 

SMC is now "Stichting Centrum Wiskunde & Informatica" (CWI). The test set 
is available as an open access publication from the CWI repository:

   https://ir.cwi.nl/pub/

Selected (modified) "Revised MC ALGOL 68 Test Set" programs are distributed 
with Algol 68 Genie with kind permission of Dick Grune.

COMMENT

BEGIN MODE NUM = LONG LONG REAL;
  
      PROC zero in = (REF NUM x, y, PROC (NUM) NUM f, tol) BOOL:
      BEGIN NUM a := x, b := y; NUM fa := f (a), fb := f (b);
          NUM c := a, fc := fa;
          WHILE
              (ABS fc < ABS fb | 
                 (a := b, fa := fb); (b := c, fb := fc); (c := a, fc := fa));
              NUM tolb := tol (b), m := (c + b) * .5;
              ABS (m - b) > tolb
          DO NUM p := (b - a) * fb, q := fa - fb;
              (p < 0 | (p := -p, q := -q));
              (a := b, fa := fb);
              fb := f (b := 
                  IF p <= ABS q * tolb
                  THEN (c > b | b + tolb | b - tolb)
                  ELSE (p < (m - b) * q | p / q + b | m)
                  FI);
              IF ABS (SIGN fb + SIGN fc) = 2
              THEN (c := a, fc := fa) 
              FI
          OD;
          (x := b, y := c); ABS (SIGN fb + SIGN fc) < 2
      END;
  
      # Pretty print NUM. #
  
      OP PRETTY = (NUM z) STRING:
         IF ABS (z - ROUND z) < 10 * long long small real
         THEN whole (z, 0)
         ELIF ABS (z) >= 0.1 THEF ABS (z) <= 10
         THEN STRING buf; 
              FOR digits TO long real width
              WHILE puts (buf, fixed (z, 0, digits));
                    NUM y;
                    gets (buf, y);
                    z /= y
              DO ~ OD;
              buf
         ELSE STRING buf, INT expw = 4; 
              FOR digits TO long real width
              WHILE puts (buf, float (z, 4 + digits + expw, digits, expw));
                    NUM y;
                    gets (buf, y);
                    z /= y
              DO ~ OD;
              buf
         FI;
      
      NUM eps = long small real;
  
      PROC solve = (NUM u, v, PROC (NUM) NUM f, STRING s) VOID:
           IF u >= v
           THEN error
           ELSE print (("Expression: ", s, new line));
                print (("[", PRETTY u, ", ", PRETTY v, "]", new line));
                IF NUM x, y;
                   zero in (x := u, y := v, f, (NUM p) NUM : eps + eps * ABS p)
                THEN print (("x: ", PRETTY x, new line));
                     print (("y: ", PRETTY f(x), new line))
                ELSE print (("zeroin cannot find a root", new line))
                FI;
                new line (standout)
           FI;

      MODE FUN = PROC (NUM) NUM;
      PROC pow = (FUN f, INT n, NUM x) NUM: f (x) ** n;
      OP ** = (FUN f, INT n) FUN: pow (f, n, );
  
      solve (-long long pi, long long pi, (NUM x) NUM : (long long sin **2) (x) - 1, "sin^2 x - 1");
      solve (-1, 1, (NUM x) NUM: x * x + 1, "x^2 + 1");

      EXIT

      error: print (("Error detected", new line))
END

COMMENT

Output:

Expression: sin^2 x -1
[-3.14159265358979323846264338327950, 3.14159265358979323846264338327950]
x: 1.57079632679489661923132169163975
y: 0

Expression: x^2 + 1
[-1, 1]
zeroin cannot find a root

COMMENT
